{"remainingRequest":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\checkbox\\checkbox.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\checkbox\\checkbox.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ElementRef, Optional, ViewChild, forwardRef, } from '@angular/core';\nimport { ElCheckboxGroup } from './checkbox-group';\nimport { isParentTag, removeNgTag } from '../shared/utils/index';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nvar ElCheckbox = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} hostGroup\n     * @param {?} el\n     */\n    function ElCheckbox(hostGroup, el) {\n        this.hostGroup = hostGroup;\n        this.el = el;\n        this.elDisabled = false;\n        this.indeterminate = false;\n        this.checked = false;\n        this.modelChange = new EventEmitter();\n        this.parentIsGroup = false;\n        this.isFocus = false;\n        this.showLabel = false;\n        this.controlChange = function () { };\n        this.controlTouch = function () { };\n    }\n    Object.defineProperty(ElCheckbox.prototype, \"disabled\", {\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        set: function (val) {\n            console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ElCheckbox.prototype.isChecked = function () {\n        if (this.parentIsGroup) {\n            return this.hostGroup.model.indexOf(this.label) > -1;\n        }\n        return this.model;\n    };\n    /**\n     * @param {?} t\n     * @param {?=} notEmit\n     * @return {?}\n     */\n    ElCheckbox.prototype.changeHandle = function (t, notEmit) {\n        if (notEmit === void 0) {\n            notEmit = false;\n        }\n        if (this.parentIsGroup) {\n            return this.hostGroup.updateModelFromChildren(t, this.label);\n        }\n        this.model = t;\n        this.checked = this.isChecked();\n        if (notEmit)\n            return;\n        this.modelChange.emit(this.model);\n        this.controlChange(this.model);\n    };\n    /**\n     * @return {?}\n     */\n    ElCheckbox.prototype.ngOnInit = function () {\n        var _this = this;\n        var /** @type {?} */ nativeElement = this.el.nativeElement;\n        this.parentIsGroup = isParentTag(nativeElement, 'el-checkbox-group');\n        removeNgTag(nativeElement);\n        // update model from group\n        if (this.parentIsGroup) {\n            this.labels = this.hostGroup.model;\n            this.model = this.isChecked();\n            // update handle\n            this.hostGroup.subscriber.push(function () {\n                _this.model = _this.isChecked();\n                _this.checked = _this.isChecked();\n            });\n        }\n        this.checked = this.isChecked();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ElCheckbox.prototype.ngOnChanges = function (changes) {\n        if (!changes || !changes.model)\n            return;\n        if (changes.model.isFirstChange())\n            return;\n        this.changeHandle(changes.model.currentValue, true);\n    };\n    /**\n     * @return {?}\n     */\n    ElCheckbox.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var /** @type {?} */ contentText = this.content && this.content.nativeElement.innerText;\n        setTimeout(function () {\n            _this.showLabel = !contentText || contentText.length < 1;\n        }, 0);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ElCheckbox.prototype.writeValue = function (value) {\n        this.model = value;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ElCheckbox.prototype.registerOnChange = function (fn) {\n        this.controlChange = fn;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ElCheckbox.prototype.registerOnTouched = function (fn) {\n        this.controlTouch = fn;\n    };\n    return ElCheckbox;\n}());\nexport { ElCheckbox };\nfunction ElCheckbox_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElCheckbox.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    ElCheckbox.ctorParameters;\n    /** @type {?} */\n    ElCheckbox.propDecorators;\n    /** @type {?} */\n    ElCheckbox.prototype.content;\n    /** @type {?} */\n    ElCheckbox.prototype.elDisabled;\n    /** @type {?} */\n    ElCheckbox.prototype.label;\n    /** @type {?} */\n    ElCheckbox.prototype.model;\n    /** @type {?} */\n    ElCheckbox.prototype.indeterminate;\n    /** @type {?} */\n    ElCheckbox.prototype.checked;\n    /** @type {?} */\n    ElCheckbox.prototype.name;\n    /** @type {?} */\n    ElCheckbox.prototype.trueLabel;\n    /** @type {?} */\n    ElCheckbox.prototype.modelChange;\n    /** @type {?} */\n    ElCheckbox.prototype.labels;\n    /** @type {?} */\n    ElCheckbox.prototype.parentIsGroup;\n    /** @type {?} */\n    ElCheckbox.prototype.isFocus;\n    /** @type {?} */\n    ElCheckbox.prototype.showLabel;\n    /** @type {?} */\n    ElCheckbox.prototype.controlChange;\n    /** @type {?} */\n    ElCheckbox.prototype.controlTouch;\n    /** @type {?} */\n    ElCheckbox.prototype.hostGroup;\n    /** @type {?} */\n    ElCheckbox.prototype.el;\n}\n//# sourceMappingURL=checkbox.js.map \n",null]}
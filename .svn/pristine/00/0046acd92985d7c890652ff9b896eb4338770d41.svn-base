{"remainingRequest":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\element-angular\\release\\tooltip\\tooltip.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\element-angular\\release\\tooltip\\tooltip.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ContentChild, ElementRef, Input, Renderer2, ViewChild, } from '@angular/core';\nimport { fadeAnimation } from '../shared/animation/index';\nimport { WindowWrapper } from '../shared/services/index';\nimport { getRealShape, getPositionForDir } from '../shared/utils/index';\nvar ElTooltip = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} window\n     */\n    function ElTooltip(renderer, el, window) {\n        this.renderer = renderer;\n        this.el = el;\n        this.window = window;\n        this.elDisabled = false;\n        this.watch = false;\n        this.placement = 'bottom';\n        this.effect = 'dark';\n        this.visibleArrow = true;\n        this.xPlacement = 'bottom';\n        this.showPopper = true;\n        this.cache = {};\n    }\n    Object.defineProperty(ElTooltip.prototype, \"disabled\", {\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        set: function (val) {\n            console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} hostRect\n     * @param {?} selfRect\n     * @return {?}\n     */\n    ElTooltip.prototype.getPosition = function (hostRect, selfRect) {\n        var /** @type {?} */ doubleConventions = this.placement.includes('-');\n        var /** @type {?} */ arrowDir = doubleConventions ? this.placement.split('-')[1] : 'center';\n        var /** @type {?} */ dir = doubleConventions ? this.placement.split('-')[0] : this.placement;\n        var /** @type {?} */ position = getPositionForDir(hostRect, selfRect, dir, arrowDir);\n        this.cache.position = position;\n        this.cache.hostRect = hostRect;\n    };\n    /**\n     * @return {?}\n     */\n    ElTooltip.prototype.setPopoerPositionAndShow = function () {\n        var _a = this.cache, tipElement = _a.tipElement, position = _a.position;\n        var /** @type {?} */ arrowElement = tipElement.querySelector('.popper__arrow');\n        this.xPlacement = position.arrowFace;\n        this.renderer.setStyle(tipElement, 'left', position.left + \"px\");\n        this.renderer.setStyle(tipElement, 'top', position.top + \"px\");\n        // fix tipbox auto wrap\n        this.renderer.setStyle(tipElement, 'width', this.tipElementShape.width + \"px\");\n        this.renderer.setStyle(tipElement, 'height', this.tipElementShape.height + \"px\");\n        this.renderer.setStyle(arrowElement, position.arrowDir, position.arrowPosition + \"px\");\n    };\n    /**\n     * @param {?} host\n     * @return {?}\n     */\n    ElTooltip.prototype.bindEvent = function (host) {\n        var _this = this;\n        host.addEventListener('mouseenter', function () {\n            if (_this.elDisabled)\n                return;\n            _this.setPopoerPositionAndShow();\n            _this.showPopper = true;\n        });\n        host.addEventListener('mouseleave', function () {\n            _this.showPopper = false;\n            _this.watch && _this.update();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    ElTooltip.prototype.update = function () {\n        var _this = this;\n        var _a = this.cache, tipElement = _a.tipElement, hostRect = _a.hostRect;\n        this.renderer.setStyle(tipElement, 'width', 'auto');\n        this.renderer.setStyle(tipElement, 'height', 'auto');\n        setTimeout(function () {\n            _this.tipElementShape = getRealShape(tipElement);\n            var /** @type {?} */ tipRect = { width: tipElement.offsetWidth, height: tipElement.offsetHeight };\n            _this.getPosition(hostRect, tipRect);\n            _this.renderer.setStyle(tipElement, 'width', _this.tipElementShape.width + \"px\");\n            _this.renderer.setStyle(tipElement, 'height', _this.tipElementShape.height + \"px\");\n        }, 0);\n    };\n    /**\n     * @return {?}\n     */\n    ElTooltip.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        var /** @type {?} */ tipElement = this.popperContent.nativeElement;\n        var /** @type {?} */ hostElement = this.el.nativeElement.children[0];\n        this.bindEvent(hostElement);\n        this.cache.tipElement = tipElement;\n        var /** @type {?} */ timer = setTimeout(function () {\n            _this.tipElementShape = getRealShape(tipElement);\n            var /** @type {?} */ tipRect = { width: tipElement.offsetWidth, height: tipElement.offsetHeight };\n            var /** @type {?} */ hostRect = hostElement.getBoundingClientRect();\n            _this.getPosition(hostRect, tipRect);\n            clearTimeout(timer);\n        }, 0);\n    };\n    return ElTooltip;\n}());\nexport { ElTooltip };\nfunction ElTooltip_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElTooltip.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    ElTooltip.ctorParameters;\n    /** @type {?} */\n    ElTooltip.propDecorators;\n    /** @type {?} */\n    ElTooltip.prototype.elDisabled;\n    /** @type {?} */\n    ElTooltip.prototype.watch;\n    /** @type {?} */\n    ElTooltip.prototype.placement;\n    /** @type {?} */\n    ElTooltip.prototype.popperClass;\n    /** @type {?} */\n    ElTooltip.prototype.effect;\n    /** @type {?} */\n    ElTooltip.prototype.visibleArrow;\n    /** @type {?} */\n    ElTooltip.prototype.popperContent;\n    /** @type {?} */\n    ElTooltip.prototype.tip;\n    /** @type {?} */\n    ElTooltip.prototype.xPlacement;\n    /** @type {?} */\n    ElTooltip.prototype.showPopper;\n    /** @type {?} */\n    ElTooltip.prototype.cache;\n    /** @type {?} */\n    ElTooltip.prototype.tipElementShape;\n    /** @type {?} */\n    ElTooltip.prototype.renderer;\n    /** @type {?} */\n    ElTooltip.prototype.el;\n    /** @type {?} */\n    ElTooltip.prototype.window;\n}\n//# sourceMappingURL=tooltip.js.map \n",null]}
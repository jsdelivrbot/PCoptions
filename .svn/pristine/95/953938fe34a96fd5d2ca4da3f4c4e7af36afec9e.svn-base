{"remainingRequest":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\element-angular\\release\\table\\children\\column.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\element-angular\\release\\table\\children\\column.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, ContentChild, ElementRef, Input } from '@angular/core';\nimport { ElTable } from '../table';\nvar ElTableColumn = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} root\n     * @param {?} el\n     */\n    function ElTableColumn(root, el) {\n        this.root = root;\n        this.el = el;\n        this.renderHTML = false;\n        this.width = 'auto';\n        this.maxDeep = 10;\n    }\n    /**\n     * @param {?} self\n     * @return {?}\n     */\n    ElTableColumn.prototype.findChild = function (self) {\n        var /** @type {?} */ children = self.children;\n        if (!children || !children.length)\n            return 0;\n        return Array.from(children)\n            .map(function (child) {\n            return child.tagName.toUpperCase() === 'EL-TABLE-COLUMN';\n        })\n            .filter(function (r) { return r; })\n            .length;\n    };\n    /**\n     * @param {?} self\n     * @return {?}\n     */\n    ElTableColumn.prototype.findLevel = function (self) {\n        var _this = this;\n        var /** @type {?} */ brothers = self.parentElement.children;\n        var /** @type {?} */ brothersDeeps = Array.from(brothers).map(function (el) { return _this.findDeep(el); });\n        var /** @type {?} */ maxDeep = brothersDeeps.sort(function (pre, next) { return next - pre; })[0];\n        return maxDeep;\n    };\n    /**\n     * @param {?} self\n     * @return {?}\n     */\n    ElTableColumn.prototype.findDeep = function (self) {\n        var /** @type {?} */ deep = 0;\n        Array.from(new Array(this.maxDeep)).every(function () {\n            var /** @type {?} */ children = self.children;\n            if (!children || !children.length)\n                return false;\n            if (children[0].tagName.toUpperCase() !== 'EL-TABLE-COLUMN') {\n                return false;\n            }\n            self = children[0];\n            deep++;\n        });\n        return deep;\n    };\n    /**\n     * @param {?} deep\n     * @param {?} self\n     * @return {?}\n     */\n    ElTableColumn.prototype.isLastElement = function (deep, self) {\n        if (deep !== 0)\n            return false;\n        var /** @type {?} */ isLast = true;\n        Array.from(new Array(this.maxDeep)).every(function () {\n            var /** @type {?} */ parent = self.parentElement;\n            if (!parent)\n                return false;\n            if (self !== parent.children[parent.children.length - 1]) {\n                isLast = false;\n                return false;\n            }\n            if (parent.tagName.toUpperCase() !== 'EL-TABLE-COLUMN') {\n                return false;\n            }\n            self = parent;\n            return true;\n        });\n        return isLast;\n    };\n    /**\n     * @return {?}\n     */\n    ElTableColumn.prototype.ngOnInit = function () {\n        var /** @type {?} */ self = this.el.nativeElement;\n        var /** @type {?} */ brothers = self.parentElement.children;\n        var /** @type {?} */ deep = this.findDeep(self);\n        var /** @type {?} */ level = deep === 0 && brothers.length > 1 ? this.findLevel(self) : deep;\n        var /** @type {?} */ childCount = this.findChild(self);\n        var /** @type {?} */ tableColumn = {\n            modelKey: this.modelKey,\n            label: this.label ? this.label : this.modelKey,\n            width: this.width,\n            slot: this.slot,\n            _renderHTML: this.renderHTML,\n            deep: deep, level: level, childCount: childCount,\n        };\n        this.root.updateColumns(tableColumn);\n        if (deep === 0) {\n            this.root.updateColumnsWidth({ auto: false, width: +this.width });\n        }\n        // last element\n        if (this.isLastElement(deep, self)) {\n            this.root.transformColumnsData();\n        }\n    };\n    return ElTableColumn;\n}());\nexport { ElTableColumn };\nfunction ElTableColumn_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElTableColumn.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    ElTableColumn.ctorParameters;\n    /** @type {?} */\n    ElTableColumn.propDecorators;\n    /** @type {?} */\n    ElTableColumn.prototype.slot;\n    /** @type {?} */\n    ElTableColumn.prototype.modelKey;\n    /** @type {?} */\n    ElTableColumn.prototype.renderHTML;\n    /** @type {?} */\n    ElTableColumn.prototype.label;\n    /** @type {?} */\n    ElTableColumn.prototype.width;\n    /** @type {?} */\n    ElTableColumn.prototype.maxDeep;\n    /** @type {?} */\n    ElTableColumn.prototype.root;\n    /** @type {?} */\n    ElTableColumn.prototype.el;\n}\n//# sourceMappingURL=column.js.map \n",null]}
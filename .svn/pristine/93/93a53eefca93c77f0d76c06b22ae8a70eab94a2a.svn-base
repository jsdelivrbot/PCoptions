{"remainingRequest":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\element-angular\\release\\slider\\slider-button.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\element-angular\\release\\slider\\slider-button.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\optionsWeb\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Optional, Renderer2, Output, EventEmitter, } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { fadeAnimation } from '../shared/animation/index';\nimport { ElSlider } from './slider';\nvar ElSliderButton = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} root\n     * @param {?} sanitizer\n     * @param {?} renderer\n     */\n    function ElSliderButton(root, sanitizer, renderer) {\n        this.root = root;\n        this.sanitizer = sanitizer;\n        this.renderer = renderer;\n        this.elDisabled = false;\n        this.model = 0;\n        this.vertical = false;\n        this.min = 0;\n        this.max = 100;\n        this.modelChange = new EventEmitter();\n        this.hovering = false;\n        this.dragging = false;\n        this.popper = true;\n        this.startPosition = 0;\n        this.globalListenFunc = [];\n        this.showPopper = false;\n    }\n    Object.defineProperty(ElSliderButton.prototype, \"disabled\", {\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        set: function (val) {\n            console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} t\n     * @return {?}\n     */\n    ElSliderButton.prototype.popperMouseHandle = function (t) {\n        if (!this.dragging && !t) {\n            this.showPopper = false;\n        }\n        if (t && !this.elDisabled) {\n            this.showPopper = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ElSliderButton.prototype.getCurrentPosition = function () {\n        return (this.model - this.min) / (this.max - this.min) * 100;\n    };\n    /**\n     * @return {?}\n     */\n    ElSliderButton.prototype.updateWrapperStyle = function () {\n        var /** @type {?} */ currentPosition = this.getCurrentPosition();\n        var /** @type {?} */ styles = (this.vertical ? 'bottom' : 'left') + \": \" + currentPosition + \"%\";\n        this.wrapperStyles = this.sanitizer.bypassSecurityTrustStyle(styles);\n    };\n    /**\n     * @return {?}\n     */\n    ElSliderButton.prototype.formatValue = function () {\n        return this.formatTooltip ? this.formatTooltip(this.model) : this.model;\n    };\n    /**\n     * @param {?} t\n     * @return {?}\n     */\n    ElSliderButton.prototype.togglePopper = function (t) {\n        this.hovering = t;\n        this.popper = t;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ElSliderButton.prototype.buttonDownHandle = function (event) {\n        var _this = this;\n        event.preventDefault();\n        this.onDragStart(event);\n        (_a = this.globalListenFunc).push.apply(_a, [\n            this.renderer.listen('window', 'mousemove', function (e) {\n                _this.draggingHandle(e);\n            }),\n            this.renderer.listen('window', 'mouseup', function () {\n                _this.dragEndHandle();\n            })\n        ]);\n        var _a;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ElSliderButton.prototype.onDragStart = function (event) {\n        // show tooltip\n        this.popperMouseHandle(true);\n        this.dragging = true;\n        if (this.vertical) {\n            this.startY = ((event)).clientY;\n        }\n        else {\n            this.startX = ((event)).clientX;\n        }\n        this.startPosition = this.getCurrentPosition();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ElSliderButton.prototype.draggingHandle = function (event) {\n        if (!this.dragging)\n            return;\n        this.togglePopper(true);\n        this.root.resetSize();\n        var /** @type {?} */ diff = 0;\n        if (this.vertical) {\n            this.currentY = ((event)).clientY;\n            diff = (this.startY - this.currentY) / this.root.size * 100;\n        }\n        else {\n            this.currentX = ((event)).clientX;\n            diff = (this.currentX - this.startX) / this.root.size * 100;\n        }\n        this.position = this.startPosition + diff;\n        this.setPosition(this.position);\n    };\n    /**\n     * @return {?}\n     */\n    ElSliderButton.prototype.dragEndHandle = function () {\n        var _this = this;\n        if (!this.dragging)\n            return;\n        // hide tooltip\n        this.showPopper = false;\n        var /** @type {?} */ timer = setTimeout(function () {\n            _this.dragging = false;\n            _this.togglePopper(false);\n            _this.setPosition(_this.position);\n            clearTimeout(timer);\n        }, 0);\n        this.globalListenFunc.forEach(function (func) { return func(); });\n        this.globalListenFunc = [];\n    };\n    /**\n     * @param {?} next\n     * @return {?}\n     */\n    ElSliderButton.prototype.setPosition = function (next) {\n        if (next === null)\n            return;\n        var /** @type {?} */ checkedNext = next < 0 ? 0 : next > 100 ? 100 : next;\n        var /** @type {?} */ val = checkedNext * (this.max - this.min) * 0.01 + this.min;\n        if (Number.isNaN(val))\n            return;\n        this.model = Math.round(val);\n        this.modelChange.emit(this.model);\n        this.updateWrapperStyle();\n    };\n    /**\n     * @return {?}\n     */\n    ElSliderButton.prototype.ngOnInit = function () {\n        this.updateWrapperStyle();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ElSliderButton.prototype.ngOnChanges = function (changes) {\n        // not include model\n        if (!changes || !changes.model)\n            return;\n        // first change\n        // if (!changes.model.previousValue) return\n        this.model = changes.model.currentValue;\n        this.updateWrapperStyle();\n    };\n    return ElSliderButton;\n}());\nexport { ElSliderButton };\nfunction ElSliderButton_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElSliderButton.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    ElSliderButton.ctorParameters;\n    /** @type {?} */\n    ElSliderButton.propDecorators;\n    /** @type {?} */\n    ElSliderButton.prototype.elDisabled;\n    /** @type {?} */\n    ElSliderButton.prototype.model;\n    /** @type {?} */\n    ElSliderButton.prototype.vertical;\n    /** @type {?} */\n    ElSliderButton.prototype.formatTooltip;\n    /** @type {?} */\n    ElSliderButton.prototype.min;\n    /** @type {?} */\n    ElSliderButton.prototype.max;\n    /** @type {?} */\n    ElSliderButton.prototype.modelChange;\n    /** @type {?} */\n    ElSliderButton.prototype.hovering;\n    /** @type {?} */\n    ElSliderButton.prototype.dragging;\n    /** @type {?} */\n    ElSliderButton.prototype.popper;\n    /** @type {?} */\n    ElSliderButton.prototype.wrapperStyles;\n    /** @type {?} */\n    ElSliderButton.prototype.startY;\n    /** @type {?} */\n    ElSliderButton.prototype.startX;\n    /** @type {?} */\n    ElSliderButton.prototype.currentY;\n    /** @type {?} */\n    ElSliderButton.prototype.currentX;\n    /** @type {?} */\n    ElSliderButton.prototype.startPosition;\n    /** @type {?} */\n    ElSliderButton.prototype.position;\n    /** @type {?} */\n    ElSliderButton.prototype.globalListenFunc;\n    /** @type {?} */\n    ElSliderButton.prototype.showPopper;\n    /** @type {?} */\n    ElSliderButton.prototype.root;\n    /** @type {?} */\n    ElSliderButton.prototype.sanitizer;\n    /** @type {?} */\n    ElSliderButton.prototype.renderer;\n}\n//# sourceMappingURL=slider-button.js.map \n",null]}
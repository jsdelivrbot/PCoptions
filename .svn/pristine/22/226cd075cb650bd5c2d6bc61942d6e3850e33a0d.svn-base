{"remainingRequest":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\input\\help.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\input\\help.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/**\n *  initial file from Element\n *  see: github.com/ElemeFE/element/blob/dev/packages/input/src/calcTextareaHeight.js\n *\n */\nvar /** @type {?} */ hiddenTextarea;\nvar /** @type {?} */ HIDDEN_STYLE = \"\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important;\\n\";\nvar /** @type {?} */ CONTEXT_STYLE = [\n    'letter-spacing',\n    'line-height',\n    'padding-top',\n    'padding-bottom',\n    'font-family',\n    'font-weight',\n    'font-size',\n    'text-rendering',\n    'text-transform',\n    'width',\n    'text-indent',\n    'padding-left',\n    'padding-right',\n    'border-width',\n    'box-sizing',\n];\nvar /** @type {?} */ calculateNodeStyling = function (targetElement) {\n    var /** @type {?} */ style = window.getComputedStyle(targetElement);\n    var /** @type {?} */ boxSizing = style.getPropertyValue('box-sizing');\n    var /** @type {?} */ paddingSize = (parseFloat(style.getPropertyValue('padding-bottom')) +\n        parseFloat(style.getPropertyValue('padding-top')));\n    var /** @type {?} */ borderSize = (parseFloat(style.getPropertyValue('border-bottom-width')) +\n        parseFloat(style.getPropertyValue('border-top-width')));\n    var /** @type {?} */ contextStyle = CONTEXT_STYLE\n        .map(function (name) { return name + \":\" + style.getPropertyValue(name); })\n        .join(';');\n    return { contextStyle: contextStyle, paddingSize: paddingSize, borderSize: borderSize, boxSizing: boxSizing };\n};\nvar /** @type {?} */ getTextareaHeight = function (targetElement, minRows, maxRows) {\n    if (minRows === void 0) { minRows = null; }\n    if (maxRows === void 0) { maxRows = null; }\n    if (!hiddenTextarea) {\n        hiddenTextarea = document.createElement('textarea');\n        document.body.appendChild(hiddenTextarea);\n    }\n    var _a = calculateNodeStyling(targetElement), paddingSize = _a.paddingSize, borderSize = _a.borderSize, boxSizing = _a.boxSizing, contextStyle = _a.contextStyle;\n    hiddenTextarea.setAttribute('style', contextStyle + \";\" + HIDDEN_STYLE);\n    hiddenTextarea.value = targetElement.value || targetElement.placeholder || '';\n    var /** @type {?} */ height = hiddenTextarea.scrollHeight;\n    if (boxSizing === 'border-box') {\n        height += borderSize;\n    }\n    else if (boxSizing === 'content-box') {\n        height -= paddingSize;\n    }\n    hiddenTextarea.value = '';\n    var /** @type {?} */ singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n    if (minRows !== null) {\n        var /** @type {?} */ minHeight = singleRowHeight * minRows;\n        if (boxSizing === 'border-box') {\n            minHeight += paddingSize + borderSize;\n        }\n        height = Math.max(minHeight, height);\n    }\n    if (maxRows !== null) {\n        var /** @type {?} */ maxHeight = singleRowHeight * maxRows;\n        if (boxSizing === 'border-box') {\n            maxHeight += paddingSize + borderSize;\n        }\n        height = Math.min(maxHeight, height);\n    }\n    return height + 'px';\n};\nexport { getTextareaHeight, };\n//# sourceMappingURL=help.js.map",null]}
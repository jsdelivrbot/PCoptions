{"remainingRequest":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\table\\table.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\table\\table.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Component, ElementRef, KeyValueDiffers, Renderer2, ViewChild, } from '@angular/core';\nimport { DocumentWrapper, WindowWrapper } from '../shared/services/index';\nimport { ElTableProps } from './table.props';\nimport { ElTableFormat } from './utils/format';\nvar ElTable = /*@__PURE__*/ (function (_super) {\n    __extends(ElTable, _super);\n    /**\n     * @param {?} el\n     * @param {?} renderer\n     * @param {?} document\n     * @param {?} window\n     * @param {?} differs\n     */\n    function ElTable(el, renderer, document, window, differs) {\n        var _this = _super.call(this) || this;\n        _this.el = el;\n        _this.renderer = renderer;\n        _this.document = document;\n        _this.window = window;\n        _this.differs = differs;\n        _this.columnsWithLevel = [];\n        _this.layout = {\n            headerHeight: 40,\n            bodyHeight: 'auto',\n            bodyWidth: 'auto',\n            scrollBarWidth: 0,\n        };\n        _this.columnsWidth = [];\n        _this.columns = [];\n        _this.widthCount = 0;\n        _this.differ = _this.differs.find([]).create();\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ElTable.GEN_TEMPLATE_KEY = function () {\n        return Math.random().toString(16).substr(2, 8);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ElTable.prototype.bodyScroll = function (event) {\n        if (!this.scrollX)\n            return;\n        var /** @type {?} */ el = ((event.target));\n        if (el.scrollLeft === undefined)\n            return;\n        this.headerRef.nativeElement.scrollLeft = el.scrollLeft;\n    };\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    ElTable.prototype.updateColumns = function (column) {\n        var /** @type {?} */ next = Object.assign(column, { index: this.columns.length });\n        this.columns.push(next);\n    };\n    /**\n     * @return {?}\n     */\n    ElTable.prototype.updateBodyHeight = function () {\n        var _this = this;\n        var /** @type {?} */ height = ElTableFormat.getCSSValue(this.height);\n        var /** @type {?} */ header = this.headerRef.nativeElement;\n        if (!header || !height)\n            return;\n        var /** @type {?} */ timer = setTimeout(function () {\n            var /** @type {?} */ headerHeight = header.offsetHeight;\n            if (headerHeight) {\n                _this.layout.headerHeight = headerHeight;\n                _this.layout.bodyHeight = height - _this.layout.headerHeight;\n                _this.layout.scrollBarWidth = _this.window.innerWidth - _this.document.body.clientWidth;\n            }\n            clearTimeout(timer);\n        }, 0);\n    };\n    /**\n     * @return {?}\n     */\n    ElTable.prototype.updateLayout = function () {\n        var /** @type {?} */ elTable = this.el.nativeElement.children[0];\n        this.layout.bodyWidth = this.widthCount || elTable.clientWidth;\n        if (this.widthCount) {\n            this.renderer.setStyle(elTable, 'width', this.widthCount + \"px\");\n        }\n    };\n    /**\n     * @param {?} widthItem\n     * @return {?}\n     */\n    ElTable.prototype.updateColumnsWidth = function (widthItem) {\n        this.columnsWidth.push(widthItem);\n    };\n    /**\n     * @param {?} columnsWidth\n     * @return {?}\n     */\n    ElTable.prototype.computeColumnsWidth = function (columnsWidth) {\n        var /** @type {?} */ auto = 0, /** @type {?} */ count = 0;\n        columnsWidth.forEach(function (item) {\n            if (item.auto)\n                return auto++;\n            if (Number.isNaN(item.width)) {\n                item.auto = true;\n                return auto++;\n            }\n            count += item.width;\n        });\n        // if user has set the width, use fixed width\n        // update layout\n        if (!auto) {\n            this.widthCount = count;\n            this.updateLayout();\n        }\n        var /** @type {?} */ average = (this.layout.bodyWidth - count) / auto;\n        return columnsWidth.map(function (item) {\n            return item.auto ? Object.assign(item, { width: average }) : item;\n        });\n    };\n    /**\n     * @return {?}\n     */\n    ElTable.prototype.transformColumnsData = function () {\n        var _this = this;\n        // order by deep\n        this.columns = this.columns.map(function (column) {\n            if (!Array.isArray(_this.columnsWithLevel[column.level])) {\n                _this.columnsWithLevel[column.level] = [];\n            }\n            _this.columnsWithLevel[column.level].push(column);\n            if (column.deep === 0)\n                return column;\n            return null;\n        }).filter(function (r) { return r; });\n        this.columnsWithLevel.reverse();\n        this.columnsWidth = this.computeColumnsWidth(this.columnsWidth);\n        // distribution template\n        this.columns = this.columns.map(function (column) {\n            if (!column.slot)\n                return column;\n            var /** @type {?} */ TEMPLATE_KEY = ElTable.GEN_TEMPLATE_KEY();\n            _this.modelStorge = _this.model.map(function (v) {\n                return Object.assign(v, (_a = {}, _a[TEMPLATE_KEY] = column.slot, _a));\n                var _a;\n            });\n            return Object.assign(column, { modelKey: TEMPLATE_KEY });\n        });\n        this.orderMap = this.columns.reduce(function (pre, next) {\n            return Object.assign(pre, (_a = {}, _a[next.modelKey] = next, _a));\n            var _a;\n        }, {});\n        this.transformModelData();\n    };\n    /**\n     * @return {?}\n     */\n    ElTable.prototype.transformModelData = function () {\n        var /** @type {?} */ orderMap = this.orderMap;\n        // add index, width, value\n        if (!this.modelStorge) {\n            this.modelStorge = this.model;\n        }\n        var /** @type {?} */ modelWithIndex = this.modelStorge.map(function (row) {\n            return Object.keys(row || {}).map(function (v) {\n                var /** @type {?} */ item = orderMap[v] || {};\n                return _a = {\n                    hidden: !item.width,\n                    value: row[v]\n                },\n                    _a[v] = row[v],\n                    _a.index = item.index,\n                    _a.width = item.width,\n                    _a._renderHTML = item._renderHTML,\n                    _a;\n                var _a;\n            })\n                .filter(function (r) { return !!r; });\n        });\n        // column sort\n        this.columnsData = modelWithIndex.map(function (row) {\n            return row.sort(function (pre, next) { return pre.index - next.index; });\n        });\n        this.updateBodyHeight();\n    };\n    /**\n     * @return {?}\n     */\n    ElTable.prototype.ngOnInit = function () {\n        var _this = this;\n        this.updateLayout();\n        this.updateBodyHeight();\n        this.globalListenFunc = this.renderer.listen('window', 'resize', function () {\n            _this.updateLayout();\n            _this.columnsWidth = _this.computeColumnsWidth(_this.columnsWidth);\n        });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ElTable.prototype.ngOnChanges = function (changes) {\n        // not include model\n        if (!changes || !changes.model)\n            return;\n        // first change\n        if (changes.model.isFirstChange())\n            return;\n        this.model = changes.model.currentValue;\n        this.transformModelData();\n    };\n    /**\n     * @return {?}\n     */\n    ElTable.prototype.ngDoCheck = function () {\n        var _this = this;\n        var /** @type {?} */ change = this.differ.diff(this.model);\n        if (!change || !this.orderMap)\n            return;\n        // distribution template\n        var /** @type {?} */ nextColumns = this.columns.map(function (column) {\n            if (!column.slot)\n                return column;\n            var /** @type {?} */ TEMPLATE_KEY = ElTable.GEN_TEMPLATE_KEY();\n            _this.modelStorge = _this.model.map(function (v) {\n                return Object.assign(v, (_a = {}, _a[TEMPLATE_KEY] = column.slot, _a));\n                var _a;\n            });\n            return Object.assign(column, { modelKey: TEMPLATE_KEY });\n        });\n        this.orderMap = nextColumns.reduce(function (pre, next) {\n            return Object.assign(pre, (_a = {}, _a[next.modelKey] = next, _a));\n            var _a;\n        }, {});\n        this.transformModelData();\n    };\n    /**\n     * @return {?}\n     */\n    ElTable.prototype.ngOnDestroy = function () {\n        this.globalListenFunc && this.globalListenFunc();\n    };\n    return ElTable;\n}(ElTableProps));\nexport { ElTable };\nfunction ElTable_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElTable.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    ElTable.ctorParameters;\n    /** @type {?} */\n    ElTable.propDecorators;\n    /** @type {?} */\n    ElTable.prototype.headerRef;\n    /** @type {?} */\n    ElTable.prototype.columnsData;\n    /** @type {?} */\n    ElTable.prototype.columnsWithLevel;\n    /** @type {?} */\n    ElTable.prototype.layout;\n    /** @type {?} */\n    ElTable.prototype.columnsWidth;\n    /** @type {?} */\n    ElTable.prototype.columns;\n    /** @type {?} */\n    ElTable.prototype.globalListenFunc;\n    /** @type {?} */\n    ElTable.prototype.orderMap;\n    /** @type {?} */\n    ElTable.prototype.modelStorge;\n    /** @type {?} */\n    ElTable.prototype.differ;\n    /** @type {?} */\n    ElTable.prototype.widthCount;\n    /** @type {?} */\n    ElTable.prototype.el;\n    /** @type {?} */\n    ElTable.prototype.renderer;\n    /** @type {?} */\n    ElTable.prototype.document;\n    /** @type {?} */\n    ElTable.prototype.window;\n    /** @type {?} */\n    ElTable.prototype.differs;\n}\n//# sourceMappingURL=table.js.map \n",null]}
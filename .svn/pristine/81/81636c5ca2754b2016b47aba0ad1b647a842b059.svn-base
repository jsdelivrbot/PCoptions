{"remainingRequest":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\upload\\upload.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\upload\\upload.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Component, ContentChild, ViewChild, } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpResponse } from '@angular/common/http';\nimport { ElUploadProps } from './upload.props';\nimport { ElUploadRequest } from './upload.request';\nvar ElUpload = /*@__PURE__*/ (function (_super) {\n    __extends(ElUpload, _super);\n    /**\n     * @param {?} request\n     * @param {?} sanitizer\n     */\n    function ElUpload(request, sanitizer) {\n        var _this = _super.call(this) || this;\n        _this.request = request;\n        _this.sanitizer = sanitizer;\n        _this.files = [];\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    ElUpload.generateID = function () {\n        return Math.random().toString(16).substr(2, 8);\n    };\n    /**\n     * @param {?} response\n     * @return {?}\n     */\n    ElUpload.updatePercentage = function (response) {\n        var loaded = response.loaded, total = response.total;\n        if (loaded === undefined || !total)\n            return 0;\n        return Math.round(loaded / total * 100);\n    };\n    /**\n     * @return {?}\n     */\n    ElUpload.prototype.clickHandle = function () {\n        if (this.elDisabled)\n            return;\n        this.input.nativeElement.click();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ElUpload.prototype.changeHandle = function (event) {\n        var _this = this;\n        var /** @type {?} */ files = ((event.target)).files;\n        if (!files || !files.length)\n            return;\n        var /** @type {?} */ checkedFiles = this.multiple ? Array.from(files) : [files[0]];\n        this.input.nativeElement.value = null;\n        checkedFiles.forEach(function (file) {\n            var /** @type {?} */ next = {\n                id: ElUpload.generateID(),\n                name: file.name,\n                status: 'ready',\n                size: file.size,\n                percentage: 0,\n                raw: file,\n                url: _this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file))\n            };\n            _this.files.push(next);\n            _this.updateFile(next);\n            _this.uploadFilter(file) === false ? _this.removeHandle(next) : _this.upload(next);\n        });\n    };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    ElUpload.prototype.upload = function (file) {\n        var _this = this;\n        file.status = 'uploading';\n        this.updateFile(file);\n        this.request.upload(this.action, file.raw)\n            .subscribe(function (event) {\n            file.percentage = ElUpload.updatePercentage(event);\n            file.percentage && _this.lifecycle.progress(file, file.percentage);\n            if (event instanceof HttpResponse) {\n                _this.lifecycle.success(Object.assign(file, { status: 'success' }), event);\n            }\n            _this.updateFile(file);\n        }, function (err) {\n            file.status = 'fail';\n            _this.lifecycle.error(file, err);\n            _this.removeHandle(file);\n        });\n    };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    ElUpload.prototype.removeHandle = function (file) {\n        this.lifecycle.remove(file);\n        var /** @type {?} */ index = this.files.findIndex(function (_a) {\n            var id = _a.id;\n            return file.id === id;\n        });\n        this.files.splice(index, 1);\n    };\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    ElUpload.prototype.updateFile = function (file) {\n        var /** @type {?} */ index = this.files.findIndex(function (_a) {\n            var id = _a.id;\n            return file.id === id;\n        });\n        if (!index)\n            return;\n        this.files[index] = file;\n    };\n    /**\n     * @return {?}\n     */\n    ElUpload.prototype.ngOnInit = function () {\n        var _this = this;\n        this.request\n            .setHeader(this.headers)\n            .setCredentials(this.withCredentials)\n            .setFileName(this.name)\n            .addExtraData(this.data);\n        this.fileList.forEach(function (file) {\n            _this.files.push({\n                id: ElUpload.generateID(),\n                name: file.name,\n                status: 'success',\n                raw: null, size: null,\n                url: _this.sanitizer.bypassSecurityTrustUrl(file.url),\n            });\n        });\n    };\n    return ElUpload;\n}(ElUploadProps));\nexport { ElUpload };\nfunction ElUpload_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElUpload.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    ElUpload.ctorParameters;\n    /** @type {?} */\n    ElUpload.propDecorators;\n    /** @type {?} */\n    ElUpload.prototype.trigger;\n    /** @type {?} */\n    ElUpload.prototype.dragger;\n    /** @type {?} */\n    ElUpload.prototype.tip;\n    /** @type {?} */\n    ElUpload.prototype.input;\n    /** @type {?} */\n    ElUpload.prototype.files;\n    /** @type {?} */\n    ElUpload.prototype.request;\n    /** @type {?} */\n    ElUpload.prototype.sanitizer;\n}\n//# sourceMappingURL=upload.js.map \n",null]}
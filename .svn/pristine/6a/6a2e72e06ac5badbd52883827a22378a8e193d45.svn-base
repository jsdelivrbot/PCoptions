{"remainingRequest":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\tree\\utils.js","dependencies":[{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\element-angular\\release\\tree\\utils.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"C:\\Users\\74274\\Desktop\\PCWebSite\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["export var /** @type {?} */ notEmptyArray = function (arr) {\r\n    if (!Array.isArray(arr))\r\n        return false;\r\n    return arr && arr.length > 0;\r\n};\r\nexport var /** @type {?} */ makeRandomID = function () { return Math.random().toString(16).slice(-8); };\r\nvar ModelStandard = /*@__PURE__*/ (function () {\r\n    /**\r\n     * @param {?} init\r\n     */\r\n    function ModelStandard(init) {\r\n        this.init = init;\r\n    }\r\n    /**\r\n     * @param {?} models\r\n     * @return {?}\r\n     */\r\n    ModelStandard.LoopRemoveChecked = function (models) {\r\n        models.forEach(function (item) {\r\n            item.checked = false;\r\n            if (item.children && item.children.length) {\r\n                ModelStandard.LoopRemoveChecked(item.children);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} models\r\n     * @param {?} accordion\r\n     * @return {?}\r\n     */\r\n    ModelStandard.DeepUpdateExpanded = function (id, models, accordion) {\r\n        if (!models || !models.length)\r\n            return [];\r\n        var /** @type {?} */ index = models.findIndex(function (item) { return item.id === id; });\r\n        if (index === -1)\r\n            return models.map(function (item) {\r\n                return Object.assign(item, {\r\n                    children: ModelStandard.DeepUpdateExpanded(id, item.children || [], accordion)\r\n                });\r\n            });\r\n        // in accordion mode, only open one.\r\n        // dont return new object, new object will cause the component to be re rendered,\r\n        // and the current animation may be lost.\r\n        var /** @type {?} */ nextExpanded = !models[index].expanded;\r\n        if (accordion) {\r\n            models = models.map(function (item) {\r\n                return Object.assign(item, {\r\n                    expanded: false\r\n                });\r\n            });\r\n        }\r\n        models[index].expanded = nextExpanded;\r\n        return models;\r\n    };\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} models\r\n     * @return {?}\r\n     */\r\n    ModelStandard.DeepUpdateChecked = function (id, models) {\r\n        if (!models || !models.length)\r\n            return [];\r\n        var /** @type {?} */ index = models.findIndex(function (item) { return item.id === id; });\r\n        if (index === -1) {\r\n            models.forEach(function (item) {\r\n                var /** @type {?} */ nextChildren = ModelStandard.DeepUpdateChecked(id, item.children || []);\r\n                var /** @type {?} */ nextIndeterminate = !!nextChildren.find(function (item) { return item.checked || item._indeterminate; });\r\n                var /** @type {?} */ allChecked = nextChildren.length > 0 && !nextChildren.find(function (item) { return !item.checked; });\r\n                item._indeterminate = allChecked ? false : nextIndeterminate;\r\n                item.children = nextChildren;\r\n                // leaf have have no subelements so no need to be updatedã€‚\r\n                // leaf element is not affected by subelements.\r\n                if (nextChildren.length) {\r\n                    item.checked = allChecked;\r\n                }\r\n            });\r\n            return models;\r\n        }\r\n        models[index].checked = !models[index].checked;\r\n        models[index]._indeterminate = false;\r\n        if (models[index].children && models[index].children.length > 0) {\r\n            ModelStandard.SetChildrenChecked(models[index].children, models[index].checked);\r\n        }\r\n        return models;\r\n    };\r\n    /**\r\n     * @param {?} models\r\n     * @param {?} checked\r\n     * @return {?}\r\n     */\r\n    ModelStandard.SetChildrenChecked = function (models, checked) {\r\n        models.forEach(function (item) {\r\n            item.checked = checked;\r\n            if (item.children && item.children.length) {\r\n                ModelStandard.SetChildrenChecked(item.children, checked);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {?} models\r\n     * @return {?}\r\n     */\r\n    ModelStandard.FindAllChecked = function (models) {\r\n        var /** @type {?} */ checkedLabels = models.reduce(function (labels, item) {\r\n            if (labels === void 0) {\r\n                labels = [];\r\n            }\r\n            var /** @type {?} */ childrenLabels = (item.children && item.children.length)\r\n                ? ModelStandard.FindAllChecked(item.children)\r\n                : [];\r\n            return labels.concat.apply(labels, childrenLabels.concat([item.checked ? item.label : []]));\r\n        }, []);\r\n        return checkedLabels;\r\n    };\r\n    /**\r\n     * @param {?} models\r\n     * @return {?}\r\n     */\r\n    ModelStandard.prototype.filterModel = function (models) {\r\n        return this.updateDepthIdent(models, this.init.initDepth);\r\n    };\r\n    /**\r\n     * @param {?} models\r\n     * @param {?} depth\r\n     * @return {?}\r\n     */\r\n    ModelStandard.prototype.updateDepthIdent = function (models, depth) {\r\n        var _this = this;\r\n        return models.map(function (item) {\r\n            var /** @type {?} */ nextID = item.id || makeRandomID();\r\n            var /** @type {?} */ nextChildren = notEmptyArray(item.children)\r\n                ? _this.updateDepthIdent(item.children, depth + 1) : [];\r\n            var /** @type {?} */ nextIndeterminate = !!nextChildren.find(function (item) { return item.checked || item._indeterminate; });\r\n            var /** @type {?} */ allChecked = nextChildren.length > 0 && !nextChildren.find(function (item) { return !item.checked; });\r\n            return Object.assign({}, item, {\r\n                id: nextID,\r\n                checked: allChecked || _this.isChecked(nextID, item),\r\n                _level: depth ? depth + 1 : 1,\r\n                expanded: _this.isExpanded(nextID, item),\r\n                _indeterminate: allChecked ? false : nextIndeterminate,\r\n                children: nextChildren,\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    ModelStandard.prototype.isExpanded = function (id, item) {\r\n        if (item.expanded === true)\r\n            return true;\r\n        if (this.init.defaultExpandAll)\r\n            return true;\r\n        if (!this.init.defaultExpandedKeys.length)\r\n            return false;\r\n        return !!this.init.defaultExpandedKeys.find(function (key) { return key === id; });\r\n    };\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    ModelStandard.prototype.isChecked = function (id, item) {\r\n        if (item.checked === true)\r\n            return true;\r\n        if (!this.init.defaultCheckedKeys.length)\r\n            return false;\r\n        return !!this.init.defaultCheckedKeys.find(function (key) { return key === id; });\r\n    };\r\n    return ModelStandard;\r\n}());\r\nexport { ModelStandard };\r\nfunction ModelStandard_tsickle_Closure_declarations() {\r\n    /** @type {?} */\r\n    ModelStandard.prototype.init;\r\n}\r\n//# sourceMappingURL=utils.js.map \r\n",null]}